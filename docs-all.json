[
  {
    "name": "IHI",
    "full_name": "Hiding Variable Insertion",
    "category": "Inheritance",
    "preconditions": "The source code has variables in a parent class, one or more of which do not exist in a subclass of this class.",
    "description": "Add a declaration in the subclass to hide the declaration of each variable declared in an ancestor. The access modifier of that variable should be exactly the same.",
    "example": "If the parent class has `int x`, add `int x` in the child class to hide the parentâ€™s variable.",
    "use_case": "A tester would use this operator to check if the child class is correctly using its own version of the variable instead of accidentally accessing the parent's variable when they have the same name. This helps to understand the scope and name resolution for member variables."
  },
  {
    "name": "IHD",
    "full_name": "Hiding Variable Deletion",
    "category": "Inheritance",
    "preconditions": "In the source code, the child class contains hiding variable declarations.",
    "description": "Delete each declaration of the hiding variable in the child class.",
    "example": "If the child class overrides variable `int x` from the parent class, delete the declaration in the child class.",
    "use_case": "A tester would use this operator to check if the child class correctly falls back to the parent's version of the variable when the child's version is removed. This verifies that inheritance mechanisms are functioning properly for member variables."
  },
  {
    "name": "IOD",
    "full_name": "Overriding Method Deletion",
    "category": "Inheritance",
    "preconditions": "A method in a subclass overrides a method in its parent class.",
    "description": "Delete the entire declaration of each overriding method.",
    "example": "If `Child.method()` overrides `Parent.method()`, delete the entire `Child.method()` declaration.",
    "use_case": "A tester would use this operator to ensure the program behaves as expected when the overriding method is not present in the child class, and the parent's version of the method is used. This verifies the basic mechanism of inheritance."
  },
  {
    "name": "IOP",
    "full_name": "Overridden Method Calling Position Change",
    "category": "Inheritance",
    "preconditions": "A subclass method calls an overridden method from its parent class.",
    "description": "Move the call to the overridden method to the first and last statements of the method, and up and down one statement.",
    "example": "If `super.method()` is in the middle of a method, move it to the start or end, or adjust its position by one statement. If it's already at the start, move it to the end; if it's already at the end, move it to the start.",
    "use_case": "A tester uses this operator to identify if the order of calls to the parent method is critical for the overall functionality. By changing the position, they can test edge cases in initialization or finalization logic of a method that utilizes polymorphism and the `super` keyword."
  },
  {
    "name": "IOR",
    "full_name": "Overridden Method Rename",
    "category": "Inheritance",
    "preconditions": "A subclass overrides methods from its parent class.",
    "description": "Change the name of the parent's method that the child has overridden.",
    "example": "If `Parent.method()` is overridden by `Child.method()`, rename `Parent.method()` to `Parent.renamedMethod()`.",
    "use_case": "Testers use this operator to determine if the program is correctly using the overridden method in the subclass and also tests the impact of renaming the overridden method to avoid unexpected behaviors."
  },
  {
    "name": "ISI",
    "full_name": "Super Keyword Insertion",
    "category": "Inheritance",
    "preconditions": "The source code has overriding variables or methods defined in an ancestor class.",
    "description": "Insert the `super` keyword before overriding variables or methods if the name is also defined in an ancestor class.",
    "example": "Replace `method()` with `super.method()` or `variable` with `super.variable`.",
    "use_case": "Testers would use this operator to verify that the correct version of the variable or method in the parent class is called when intended. This helps ensure that `super` is used appropriately to access parent class members when they are hidden by subclass members of the same name, explicitly calling the parent logic."
  },
  {
    "name": "ISD",
    "full_name": "Super Keyword Deletion",
    "category": "Inheritance",
    "preconditions": "The source code contains occurrences of the `super` keyword.",
    "description": "Delete each occurrence of the `super` keyword.",
    "example": "If a method contains `super.method()`, remove `super` and use `method()` directly.",
    "use_case": "A tester would use this operator to see what happens when `super` is not used and the child tries to access the local version of the variable or method, which might result in infinite loops if the method calls itself in the local class."
  },
  {
    "name": "IPC",
    "full_name": "Explicit Parent Constructor Deletion",
    "category": "Inheritance",
    "preconditions": "The source code contains explicit calls to a superclass constructor.",
    "description": "Delete each call to a `super` constructor.",
    "example": "If a constructor contains `super(x)`, delete the `super` call.",
    "use_case": "Testers use this operator to check whether the initialization logic in the superclass is essential for the child class to function correctly. Removing the call to `super` might lead to the child class being uninitialized or only partially initialized."
  },
  {
    "name": "JTI",
    "full_name": "this Keyword Insertion",
    "category": "Java-Specific",
    "preconditions": "The source code contains instance methods or constructors that can reference instance variables or methods using the `this` keyword.",
    "description": "Insert the `this` keyword wherever possible.",
    "example": "Replace `x = value` with `this.x = value`.",
    "use_case": "A tester uses this operator to specifically test the effect of explicit access using the `this` keyword and also to differentiate class-level variables from method-level variables. Using `this` can help in understanding the code flow and dependencies."
  },
  {
    "name": "JTD",
    "full_name": "this Keyword Deletion",
    "category": "Java-Specific",
    "preconditions": "The source code already uses the `this` keyword in instance methods or constructors.",
    "description": "Delete the `this` keyword wherever it is used.",
    "example": "Replace `this.x = value` with `x = value`.",
    "use_case": "A tester would use this operator to verify if the code is still correct when not explicitly using `this`. If the `this` keyword is not needed, it helps to reduce the overall code verbosity without impacting functionality."
  },
  {
    "name": "JSI",
    "full_name": "Static Modifier Insertion",
    "category": "Java-Specific",
    "preconditions": "The source code contains instance variables that can be modified and have no dependencies on instance-specific state.",
    "description": "Add the `static` modifier to instance variables.",
    "example": "Change `int x` to `static int x`.",
    "use_case": "A tester would use this to see if making a member variable static causes any issues for instances of the class. This tests if all instances are sharing the same variable as it is a static variable."
  },
  {
    "name": "JSD",
    "full_name": "Static Modifier Deletion",
    "category": "Java-Specific",
    "preconditions": "The source code contains static variables or methods.",
    "description": "Remove the `static` modifier from variables or methods.",
    "example": "Change `static int x` to `int x`.",
    "use_case": "Testers use this operator to check the behavior when a variable or method is no longer static. This operator can reveal unintended sharing or dependencies between instances that may rely on a static access."
  },
  {
    "name": "JID",
    "full_name": "Member Variable Initialization Deletion",
    "category": "Java-Specific",
    "preconditions": "The source code initializes member variables with explicit values at the point of declaration.",
    "description": "Remove the initialization of each member variable.",
    "example": "Change `int x = 5` to `int x;`.",
    "use_case": "A tester would use this to verify the effects of not initializing member variables with explicit values. This test checks the default values and the initialization process within the code."
  },
  {
    "name": "JDC",
    "full_name": "Java-supported Default Constructor Deletion",
    "category": "Java-Specific",
    "preconditions": "The source code contains default constructors (constructors with no parameters) explicitly declared in the class.",
    "description": "Delete each declaration of a default constructor.",
    "example": "If `public ClassName() {}` exists, delete the constructor entirely.",
    "use_case": "A tester can use this to test how the program reacts when an explicit default constructor is not provided. They want to make sure that the default implicit constructor is being called and the program still behaves as expected."
  },
  {
    "name": "AMC",
    "full_name": "Access Modifier Change",
    "category": "Encapsulation",
    "preconditions": "The source code contains instance variables and methods with defined access levels (e.g., public, private, protected or default).",
    "description": "The access level for each instance variable and method is changed to other access levels. Access levels should change randomly each time.",
    "example": "Change `private int x;` to `public int x;` or change `protected void methodName()` to `private void methodName()` or change `int x;` to `private int x;`. Change access levels randomly.",
    "use_case": "Testers use this to verify that encapsulation is enforced correctly. By changing access modifiers, they can try to access members that should be private or protected to check if proper restrictions are being enforced."
  },
  {
    "name": "PNC",
    "full_name": "New Method Call with Child Class Type",
    "category": "Polymorphism",
    "preconditions": "The source code contains object instantiations using the `new` keyword with a specific type, and there is a known child class (Child1 or Child2) that can be instantiated.",
    "description": "The actual type of a new object is changed in the `new()` statement.",
    "example": "Change `Parent a = new Parent();` to `Parent a = new Child1();` (where `Child1` is a subclass of `Parent`).",
    "use_case": "Testers use this operator to test whether the program behaves as expected when the actual object instantiated is a child class of the declared type. This will help in detecting polymorphic behaviors and inheritance."
  },
  {
    "name": "PMD",
    "full_name": "Member Variable Declaration with Parent Class Type",
    "category": "Polymorphism",
    "preconditions": "The source code contains declared types for objects created with the `new` keyword, and there is a parent-child class relationship between the types (e.g., `Parent` and `Child1`, `Child2`).",
    "description": "The declared type of each new object is changed in the declaration.",
    "example": "Change `Parent a = new Child1();` to `Child1 a = new Child1();` (where `Child1` is a subclass of `Parent`).",
    "use_case": "Testers use this operator to verify that when a member variable is of the child type, it will no longer behave polymorphically and it checks the consequences of not declaring a parent class."
  },
  {
    "name": "PPD",
    "full_name": "Parameter Variable Declaration with Child Class Type",
    "category": "Polymorphism",
    "preconditions": "The source code contains methods with parameters declared as objects, and there are classes with a parent-child relationship (e.g., `Parent`, `Child1`, `Child2`).",
    "description": "The declared type of each parameter object is changed to a child class type.",
    "example": "Change `void method(Parent p)` to `void method(Child1 c)` (where `Child1` is a subclass of `Parent`).",
    "use_case": "Testers would use this operator to check how the method behaves when the parameter is a specific child type instead of the parent type. This helps identify issues where methods may not correctly handle subclasses in the class hierarchy."
  },
  {
    "name": "PCI",
    "full_name": "Type Cast Operator Insertion",
    "category": "Polymorphism",
    "preconditions": "The source code contains object references with a declared type, and there is a parent-child relationship between the types (e.g., `Parent`, `Child1`).",
    "description": "Insert a type cast to cast the object reference to either the parent or child class type, depending on the context.",
    "example": "If `Child1` extends `Parent`, change `Child1 c = new Child1();` to `Parent p = (Parent) c;`.",
    "use_case": "Testers use this operator to verify that type casting is done correctly. They check if exceptions occur or incorrect behaviors are triggered when casting to an incompatible type."
  },
  {
    "name": "PCD",
    "full_name": "Type Cast Operator Deletion",
    "category": "Polymorphism",
    "preconditions": "The source code contains type casting operators that cast object references.",
    "description": "Delete the type casting operator from the object reference.",
    "example": "Change `(Child1) parent` to `parent` by removing the cast.",
    "use_case": "A tester would use this operator to check how the code behaves when type casting is omitted. They verify whether implicit casting is necessary or if removing the cast causes errors."
  },
  {
    "name": "PPC",
    "full_name": "Cast Type Change",
    "category": "Polymorphism",
    "preconditions": "The source code contains type casting operators that cast object references between parent and child classes.",
    "description": "Change the type to which an object reference is being cast, either to the parent or another child class.",
    "example": "Change `(Child1) parent` to `(Child2) parent` (where `Child1` and `Child2` are subclasses of `Parent`).",
    "use_case": "Testers use this operator to see how the program reacts to an incorrect type cast, specifically helping identify cases that throw exceptions or cause unexpected behavior."
  },
  {
    "name": "PRV",
    "full_name": "Reference Assignment with Other Compatible Type",
    "category": "Polymorphism",
    "preconditions": "The source code contains assignment statements that assign object references between compatible types (e.g., `Parent` and `Child1`).",
    "description": "Change the object on the right side of an assignment to refer to a compatible object type.",
    "example": "If we assume that `Child1` and `Child2` are subclasses of `Parent`, change `Parent p = c;` to `Parent p = d;` (where `c` is a `Child1` object and `d` is a `Child2` object).",
    "use_case": "Testers use this operator to verify that the code correctly handles polymorphic assignments, ensuring that object references of compatible types can be assigned without causing errors."
  },
  {
    "name": "OMR",
    "full_name": "Overloading Method Contents Replace",
    "category": "Polymorphism",
    "preconditions": "The source code contains methods with the same name but different parameter types or number of parameters, and different method bodies.",
    "description": "Replace the body of one overloaded method with the body of another method with the same name and parameters of the same type in all possible permutations, using the `this` keyword.",
    "example": "If we have methods `set(int x, int y)` and `set(int x, int y, int z)`, replace the body of `set(int x, int y)` with the body of `set(int x, int y, int z)` and vice versa using `this` keyword.",
    "use_case": "A tester uses this operator to check that overloaded methods are invoked correctly. It verifies that overloaded methods are not unintentionally calling different implementations or incorrect versions."
  },
  {
    "name": "OMD",
    "full_name": "Overloading Method Deletion",
    "category": "Polymorphism",
    "preconditions": "The source code contains multiple overloaded methods with the same name but different bodies.",
    "description": "Delete each overloaded method declaration, one at a time, to test the impact of removing one overload.",
    "example": "If we have `void print(String s)` and `void print(int i)`, delete one method, such as `void print(int i)`.",
    "use_case": "Testers use this operator to verify that the code still works with only some of the overloaded versions of a method, ensuring the program functions correctly even when not all overloads are available."
  },
  {
    "name": "OAC",
    "full_name": "Arguments of Overloading Method Call Change",
    "category": "Polymorphism",
    "preconditions": "The source code contains overloaded methods with different argument orders in their signatures.",
    "description": "Change the order of the arguments in method invocations to match the order in another overloaded method signature, if one exists.",
    "example": "If we have `set(int x, int y)` and `set(int x, int y, int z)`, change `set(1, 2)` to `set(1, 2, 3)`.",
    "use_case": "Testers use this operator to ensure the correct method is called when the arguments in overloaded methods are rearranged. It also verifies that the method signatures are properly distinguished."
  }
]
